What are Hooks?
-Hooks are a new feature addition in React version 16.8 which allows you to use React features without having to write a class.
-Hook do not work inside a class.

Why Hooks?

Reason 1
1.Understand how this keyword works in JavaScript.
2.Remember to bind event handlers in class components.
3.Classes do not minify very well and make hot reloading very unreliable.

Reason 2
1.There is no particular way to reuse stateful component logic.
2.HOC and render props patterns do address this problem.
3.Makes the code harder to follow.
4.There is need a to share stateful logic in a better way.

Hooks help us in this aspect by allowing us to reuse stateful component logic without changing the component hierarchy.

Reason 3

1.Create components for complex scenarios such as data fetching and subscribing to events.
2.Related code is not organized in one place. E.g. => Data fetching and event listeners.
3.Because of stateful logic - Cannot break components into smaller ones.

Hooks let you slit into one component into smaller functions based on what pieces are related.

useState Hook 
-import useState
-pass it in a default value
-assign return pair of value
-use them in a render function

Rules of Hooks
1."Only Call Hooks at the Top Level", Don't call Hooks inside loops, conditions, or nested functions.
2."Only Call Hooks from React Functions", Call them from within React functional components and not just any regular JS function.

With Previous State => setValue((prevValue) => prevValue - ...)
-A state variable can be string, number, boolean, object, or array
-In object, when assigning to the value just use the spread operator ...object, the thing that you want to change.
-In array, spread the array and append the array with the new value.

-The useState hook lets you add state to functional components
-With the useState hook, the state can be anything.
-The useState hook returns an array with 2 elements. 1. the current value 2. a state setter function.
-New state value depends on the previous state value? You can pass a function to the setter function.
-When dealing with objects or arrays, always make sure to spread your state variable and then call the setter function.