What are Hooks?
-Hooks are a new feature addition in React version 16.8 which allows you to use React features without having to write a class.
-Hook do not work inside a class.

Why Hooks?

Reason 1
1.Understand how this keyword works in JavaScript.
2.Remember to bind event handlers in class components.
3.Classes do not minify very well and make hot reloading very unreliable.

Reason 2
1.There is no particular way to reuse stateful component logic.
2.HOC and render props patterns do address this problem.
3.Makes the code harder to follow.
4.There is need a to share stateful logic in a better way.

Hooks help us in this aspect by allowing us to reuse stateful component logic without changing the component hierarchy.

Reason 3

1.Create components for complex scenarios such as data fetching and subscribing to events.
2.Related code is not organized in one place. E.g. => Data fetching and event listeners.
3.Because of stateful logic - Cannot break components into smaller ones.

Hooks let you slit into one component into smaller functions based on what pieces are related.

useState Hook 
-import useState
-pass it in a default value
-assign return pair of value
-use them in a render function

Rules of Hooks
1."Only Call Hooks at the Top Level", Don't call Hooks inside loops, conditions, or nested functions.
2."Only Call Hooks from React Functions", Call them from within React functional components and not just any regular JS function.

With Previous State => setValue((prevValue) => prevValue - ...)
-A state variable can be string, number, boolean, object, or array
-In object, when assigning to the value just use the spread operator ...object, the thing that you want to change.
-In array, spread the array and append the array with the new value.

-The useState hook lets you add state to functional components
-With the useState hook, the state can be anything.
-The useState hook returns an array with 2 elements. 1. the current value 2. a state setter function.
-New state value depends on the previous state value? You can pass a function to the setter function.
-When dealing with objects or arrays, always make sure to spread your state variable and then call the setter function.

useEffect 
-The effect hook lets you perform side effects in functional components.
-It is a close replacement for the componentDidMount, componentDidUpdate, and componentWillMount.
-Passed in a function as a parameter and this function will execute after render of the component.
-useEffect has to be placed in the component because it can access the state and props without write any additional codes.

Conditionally run useEffect => for conditionally executing an effect, we passed in a second parameter. it is an array. In that array, we need to specify either prop or state,
that we need to watch for. 

-Effect will be called after render of the component unless you specify the dependency array. []

Run the effects only once. By simplifying the empty array. Only on initial render.

useEffect with cleanup => (componentWillUnMount). When you unmount the component, make sure you cancel all the subscriptions and listeners. Clean up after your component.
-Whatever you return in the function of useEffect, it is the cleanup function.
-When you want to execute some component cleanup code, you include it in the function and return the function from the function pass the useEffect. The clean code can be cancelling subscriptions, timers and removing eventListeners.

-If you think dependency array is a way to specify when you want to rerun the effect. <= This is gonna be a problem. Instead, dependency array should be thought of as a way to let React know about everything the effect must watch for changes.
-By announcing the prevState, you can keep track of the previous value. You can leave the empty array in the dependency array.

-Whenever you try to leave the dependency array empty, please make sure you really do not have any.
-Whenever you try to call function from useEffect, you can leave the function inside the useEffect. <= This way when you read through the useEffect, you are much more like to see a prop or state which have to specify as dependency.
-If you have multiple useEffect to run, make sure you separate them out rather than having all the code in a single useEffect.

Fetching Data with useEffect <= use axios in the useEffect. 
Fetching Data Individual with id <= /id 

Context
-Provides a way to pass data through the component tree without having to pass props down manually at every level.
1.create UserContext 
2.Provide a value to the context. Provider has to wrap the component.
3.Consume the value
-useContext hook only make the consumption of the context value simpler.
=> How? creating and providing the value remain the same. 1. import useContext from react, 2. import necessary context. 3. call the useContext function passing in the context as its arguments. useContext returns a context value. ***value ={''}

useReducer

-useReducer is a hook that is used for state management.
-It is an alternative to useState.

What is the different between useState and useReducer?
-useReducer is more primitive hook than useState.
-useReducer is related to reducer.
-useReducer is changing a state in React components.

reduce vs useReducer
-reduce in JS                                  | -useReducer in React
-array.reduce(reducer, initialValue)           | -useReducer(reducer, initialState)
-singleValue = reducer(accumulator, itemValue) | -newState = reducer(currentState, action)
-reduce method returns a single value          | -useReducer returns a pair of values. [newState, dispatch]

1.Define Initial State.
2.Define Reducer Method.
3.Import and call useReducer.
4.Get a hold of value to display in the JSX. We need a way to call the reducer with an appropriate action.
5.useReducer return a pair of value. The current state to the value. [value, dispatch]. This dispatch method allow us to execute the code corresponding to the particular action.

What is the advantage of this object complex initialState and object action?
-Concerning the value that we need to change. By making action as an object, we can use additional data in the reducer function.
-State as an object. Suppose we want to maintain one or more state, make a state in an object.  By using state as an object, we can track the states.

Multiple useReducers
-When dealing with multiple state variables that have the same state transition, it is a good idea to have a multiple useReducers function making use of same reducer function.
-It prevent from duplicating code.
-The value also independent.

useReducers with useContext
-useReducers - Local state management
-Share state between components - Global state management.
-Global state management can be created by combining both useReducers and useContext.

1. Create a useReducers.
2. Provide and consume the reducer context in the require component.
3. Provide a value with an object with a key

Fetching Data with useReducers.
1.Group the related states in one place.
2.At the same time, the state transition are grouped together.

When should I use useReducer vs useState? 
Scenario                    |  useState                    |  useReducers
-Type of state              | -number, string, boolean     | -Object, Array
-Number of state transition | -one or two                  | -Too many
-Related state transitions? | -No                          | -Yes 
-Business Logic             | -No business logic           | -Complex business logic
-local vs global            | -Local                       | -Global

Performance Optimization 
-Too improved performance optimization, we need to restrict re-render to only components that need to re-render.
-React.memo is the answer. It is higher hierarchical component that will prevent functional components from being re-render if the prop or state do not change. 
-function is created each time the parent component is re-render. When dealing with functions, we always have to consider references equality. Even though two functions have the exact same behavior, it does not mean it is equivalent to each other. So the function before the re-render is different from the function after the re-render. 
-Since the function is a prop, react.memo sees that the prop has changed and will not prevent the re-render.

How do we tell React that we do not need to create new function when we update the value?
-useCallback is the answer for it.

useCallback Hook
-useCallback is a hook that will return a memorized version of the callback function that only changes if one of the dependencies has changed.
-It will catch the function and return that if value is not changed.

Why?
-It is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders. 

How?
-import useCallback 
-call useCallback 
-it accepts the callback function as first parameter and the array of dependencies as second parameter.

useMemo
-need a way to tell React not to re-render when unnecessary. 
-useMemo is a hook that will only re-compute the cache value when one of the dependencies has changed. 
-It accepts function as a first parameter which return needed to be cache and second parameter accepts dependencies array.

When to use useCallback and useMemo => https://kentcdodds.com/blog/usememo-and-usecallback
-useCallback => catches the provided function instance itself
-useMemo => invoke the provided function and cache the result.
-When you need to cache function use callback and when you need to cache the result of the invoked function use memo.

useRef 
-This hook make it possible to access DOM nodes directly within functional components.
-Focusing as the page render.
-It can be stored any mutable value. 
What is great about useRef?
-It let the value passes through the re-render while also not causing any additional re-render when the value changes.

Custom Hooks
-Building your own hook.
-A custom hook is basically a JS function whose name starts with "use".
-A custom hook can also call other Hook if required.

Why?
Share Logic - Alternative to HOCs and Render Props.

How to create custom hooks?
-We are reusing logic instead of duplicating.
What are custom hooks has to do with encapsulate this control component behavior for input elements. That is binding value and onChange attribute.